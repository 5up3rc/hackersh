#!/usr/bin/python
#
# Copyright (C) 2013 Itzik Kotler
#
# This file is part of Hackersh.
#
# Hackersh is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2, or (at your option)
# any later version.
#
# Hackersh is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Hackersh; see the file COPYING.  If not,
# see <http://www.gnu.org/licenses/>.

import sys
import readline
import code
import codeop
import argparse
import os
import atexit
import pythonect


try:

    import _preamble

except ImportError:

    sys.exc_clear()


# Local imports

import hackersh
import hackersh.components
import hackersh.components.system.print_
import hackersh.conio
import hackersh.log


# Hackersh Console

class HackershCompile(codeop.Compile):

    def __init__(self):

        codeop.Compile.__init__(self)

    def __call__(self, source, filename, symbol):

        if source[-1] == '\\':
            return None

        return source.replace('\\\n', '')


class HackershCommandCompiler(codeop.CommandCompiler):

    def __init__(self):

        codeop.CommandCompiler.__init__(self)

        self.compiler = HackershCompile()


class HackershInteractiveConsole(code.InteractiveConsole):

    def __init__(self, locals=None, histfile=os.path.expanduser("~/.hackersh_history")):

        code.InteractiveConsole.__init__(self, locals)

        self.compile = HackershCommandCompiler()

        self.init_history(histfile)

    def init_history(self, histfile):

        try:

            readline.read_history_file(histfile)

        except IOError, e:

            hackersh.log.logger.warn('Reading history file %s failed due to %s' % (histfile, e))

            # No history file

            pass

        atexit.register(self.save_history, histfile)

    def save_history(self, histfile):

        readline.write_history_file(histfile)

    def runcode(self, code_):

        try:

            hackersh.log.logger.debug('Evaluating `%s`' % code_)

            return_value = hackersh.eval(code_, self.locals)

            # Empty List is not False, but Empty list is not True either

            if return_value is not False and return_value:

                # Not an empty list? Reduce!

                if isinstance(return_value, list):

                    return_value = reduce(lambda x, y: x+y if isinstance(x, hackersh.components.Context) else y+x, return_value)

                self.locals['_'] = return_value

                self.locals['__IN_EVAL__'] = True

                hackersh.components.system.print_.print_().main([return_value], {})

        except SystemExit:

            raise

        except hackersh.HackershError as e:

            print e.msg

        except:

            self.showtraceback()

        else:

            if code.softspace(sys.stdout, 0):

                print


def set_or_update_env():

    os.environ['HACKERSHPATH'] = os.path.pathsep.join(os.getenv('HACKERSHPATH', '').split(os.path.pathsep) + map(lambda x: os.path.abspath(os.path.join(os.path.dirname(hackersh.components.__file__), '..', 'components')) + '/' + x, ['system', 'internal', 'external']))


def main():

    locals_ = {}

    banner = "Hackersh version %s ( http://www.hackersh.org )" % hackersh.__version__

    # Parse command-line arguments

    parser = argparse.ArgumentParser(sys.argv)

    parser.add_argument('script', metavar='file', nargs='?', type=argparse.FileType('rt'))
    parser.add_argument('--verbose', '-v', action='count', default=0)
    parser.add_argument('--quiet', '-q', help='Do not print the normal Hackersh welcome', action='store_true', default=0)
    parser.add_argument('--version', '-V', action='version', version=banner)

    args = parser.parse_args()

    # Set or Update Hackersh Environment Variables

    set_or_update_env()

    # Setup logging level

    if args.verbose:

        hackersh.log.logger.setLevel(hackersh.log.logging.ERROR - ((args.verbose % 4) * 10))

    # Add current working directory to sys.path

    sys.path.insert(0, os.getcwd())

    # Extract components into locals_

    components = hackersh.components.get_all_components(os.getenv('HACKERSHPATH'))

    if not components:

        hackersh.log.logger.warn('No components were found!')

    else:

        locals_.update(components)

    # Script-mode (i.e. ./hackersh script or #!/usr/bin/env hackersh)

    if args.script:

        content = args.script.read()

        scriptname, scriptextension = os.path.splitext(args.script.name)

        if scriptextension:

            parsers = pythonect.internal.parsers.get_parsers(os.path.abspath(os.path.join(os.path.dirname(pythonect.internal.parsers.__file__), '..', 'parsers')))

            content = parsers[scriptextension[1:]].parse(content)

            if content is None:

                raise Exception("Unable to parse %s with %s" % (scriptname, parsers[scriptextension].__repr__()))

        hackersh.eval(content, locals_)

        args.script.close()

    # Interactive-mode (i.e. ./hackersh)

    else:

        # Change prompt

        sys.ps1 = '% '

        motd = "Welcome to Hacker Shell Version %s!" % hackersh.__version__

        banner = "Hackersh Version %s\nCopyright (C) 2013 Itzik Kotler\nVisit http://www.hackersh.org for updates.\n" % hackersh.__version__

        HackershInteractiveConsole(locals_).interact(banner + hackersh.conio.draw_msgbox(motd) if not args.quiet else '')

    return 0


# Entry Point

if __name__ == "__main__":

    sys.exit(main())
